from flask import Flask, request, abort
import requests
import os
import base64
import tempfile
import time
import hmac
import hashlib
import re
import uuid
from collections import deque
from dotenv import load_dotenv
from openai import OpenAI

load_dotenv()
app = Flask(__name__)

# ====== ENV ======
VERIFY_TOKEN = os.getenv("VERIFY_TOKEN")
WHATSAPP_TOKEN = os.getenv("WHATSAPP_TOKEN")
WHATSAPP_PHONE_ID = os.getenv("WHATSAPP_PHONE_ID")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
OWNER_NUMBER = os.getenv("OWNER_NUMBER", "77089537431")
APP_SECRET = os.getenv("APP_SECRET", "")  # –¥–ª—è X-Hub-Signature-256

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö ENV
REQUIRED_ENVS = ["VERIFY_TOKEN", "WHATSAPP_TOKEN", "WHATSAPP_PHONE_ID", "OPENAI_API_KEY"]
missing = [k for k in REQUIRED_ENVS if not os.getenv(k)]
if missing:
    raise RuntimeError(f"Missing env vars: {', '.join(missing)}")

client = OpenAI(api_key=OPENAI_API_KEY)

# ====== –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã/–Ω–∞—Å—Ç—Ä–æ–π–∫–∏ ======
MAX_TURNS = 16              # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–º–ø–∞–∫—Ç–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é
STRICT_MODE = True          # –æ—Ñ—Ñ—Ç–æ–ø-—Å—Ç–æ—Ä–æ–∂ –≤–∫–ª—é—á—ë–Ω
MAX_MEDIA_MB = 25           # –ª–∏–º–∏—Ç –Ω–∞ —Ä–∞–∑–º–µ—Ä –º–µ–¥–∏–∞
SEEN_MSGS = deque(maxlen=5000)  # –∞–Ω—Ç–∏-–¥–µ–¥—É–ø –ø–æ –≤—Ö–æ–¥—è—â–∏–º ID
ESC_COOLDOWN = {}           # –∞–Ω—Ç–∏-—Å–ø–∞–º –¥–ª—è —ç—Å–∫–∞–ª–∞—Ü–∏–π
SCOPE_CACHE = {}            # –∫—ç—à –¥–ª—è IN/OUT –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏: {text_norm: (ts, bool)}

# –ú–æ–¥–µ–ª–∏
GEN_MODEL = "gpt-5"
TRANSCRIBE_MODEL = "gpt-4o-transcribe"

# ====== –ü–∞–º—è—Ç—å —Å–µ—Å—Å–∏–π (–æ–±—ë—Ä—Ç–∫–∞ ‚Äî –º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ Redis –ø–æ–∑–∂–µ) ======
class Store:
    def __init__(self):
        self.sessions = {}     # {phone: [{"role": "...", "content": "..."}]}
        self.notified = set()
        self.last_reply = {}   # {phone: reply}

STORE = Store()

# ====== UI —Ñ—Ä–∞–∑—ã ======
FALLBACKS = [
    "–ß–µ–º –ø–æ–º–æ—á—å? –ò–Ω—Ç–µ—Ä–µ—Å—É—é—Ç –±–æ—Ç—ã WhatsApp/Telegram/Instagram –∏–ª–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å CRM?",
    "–ü–æ–¥—Å–∫–∞–∂–∏—Ç–µ, —á—Ç–æ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞—Ç—å: WhatsApp/Telegram/Instagram –±–æ—Ç –∏–ª–∏ CRM-–∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è?",
    "–ì–æ—Ç–æ–≤ –ø–æ–º–æ—á—å. –ù—É–∂–µ–Ω –±–æ—Ç (WhatsApp/Telegram/Instagram) –∏–ª–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å amo/Bitrix/1C?"
]
OFFTOP_REPLY = (
    "–ü–æ—Ö–æ–∂–µ, –≤–æ–ø—Ä–æ—Å –≤–Ω–µ –Ω–∞—à–∏—Ö —É—Å–ª—É–≥. –ú—ã –∑–∞–Ω–∏–º–∞–µ–º—Å—è –ò–ò –¥–ª—è –±–∏–∑–Ω–µ—Å–∞: "
    "—á–∞—Ç-–±–æ—Ç—ã WhatsApp/Telegram, –≥–æ–ª–æ—Å–æ–≤—ã–µ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç—ã, –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å amoCRM/Bitrix24/1C –∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ–≤. "
    "–ü–æ–¥—Å–∫–∞–∂–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞—Ç—å ‚Äî —Å–±–æ—Ä –ª–∏–¥–æ–≤, –∑–∞–ø–∏—Å—å –∫–ª–∏–µ–Ω—Ç–æ–≤, –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è, FAQ –∏–ª–∏ –ø—Ä–æ–¥–∞–∂–∏?"
)

# ====== –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π (short) ======
ISTE_AI_KNOWLEDGE = """
üè¢ ISTE AI ‚Äî –ò–ò-—Ä–µ—à–µ–Ω–∏—è –ø–æ–¥ –∫–ª—é—á –¥–ª—è –±–∏–∑–Ω–µ—Å–∞ –≤ –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω–µ
–§–æ–∫—É—Å: —Ç–æ–ª—å–∫–æ –ø—Ä–∏–∫–ª–∞–¥–Ω–æ–π –ò–ò –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–π –†–ö. –Ø–∑—ã–∫–∏: KK/RU/EN. –¢–æ–Ω: –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –∏ –¥–µ–ª–æ–≤–æ–π.

–ß—Ç–æ –¥–µ–ª–∞–µ–º:
‚Ä¢ üîπ –ò–ò-–∞–≥–µ–Ω—Ç—ã (–º–µ–Ω–µ–¥–∂–µ—Ä—ã –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º/–ø–æ–¥–¥–µ—Ä–∂–∫–µ, —Ä–µ–∫—Ä—É—Ç–µ—Ä—ã, —á–∞—Ç-–±–æ—Ç—ã)
‚Ä¢ üîπ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å CRM/—É—á—ë—Ç–æ–º (amoCRM, Bitrix24, 1C, Google Sheets, Webhooks)
‚Ä¢ üîπ –ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª ¬´–ø–æ–¥ –∫–ª—é—á¬ª: –∞—É–¥–∏—Ç ‚Üí –ø–∏–ª–æ—Ç 1‚Äì2 –Ω–µ–¥–µ–ª–∏ ‚Üí –ø—Ä–æ–¥ ‚Üí –ø–æ–¥–¥–µ—Ä–∂–∫–∞

–ü—Ä–∏–Ω—Ü–∏–ø—ã:
‚Ä¢ –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –ø–æ–¥—Ö–æ–¥ –ø–æ–¥ –Ω–∏—à—É –∏ KPI
‚Ä¢ –î–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ NDA, –¥–æ—Å—Ç—É–ø—ã –º–∏–Ω–∏–º–∞–ª—å–Ω–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ
‚Ä¢ –ò–∑–º–µ—Ä–∏–º–æ—Å—Ç—å: —Ü–µ–ª–∏, –º–µ—Ç—Ä–∏–∫–∏, –æ—Ç—á—ë—Ç—ã

üìä –ü—Ä–∞–π—Å-–ª–∏—Å—Ç (–æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–æ—á–Ω–æ):
‚Ä¢ üí¨ WhatsApp-–±–æ—Ç ‚Äî —Å–æ–∑–¥–∞–Ω–∏–µ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞: 100 000 ‚Ç∏, –µ–∂–µ–º–µ—Å—è—á–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞: 10 000 ‚Ç∏
‚Ä¢ üì© Telegram-–±–æ—Ç ‚Äî —Å–æ–∑–¥–∞–Ω–∏–µ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞: 80 000 ‚Ç∏, –µ–∂–µ–º–µ—Å—è—á–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞: 8 000 ‚Ç∏
‚Ä¢ üì∑ Instagram-–±–æ—Ç ‚Äî —Å–æ–∑–¥–∞–Ω–∏–µ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞: 100 000 ‚Ç∏, –µ–∂–µ–º–µ—Å—è—á–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞: 10 000 ‚Ç∏

–ö–æ–º—É: —Å–µ—Ä–≤–∏—Å—ã, e-commerce, –∫–ª–∏–Ω–∏–∫–∏ (–±–µ–∑ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏), –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ, –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å, b2b-—É—Å–ª—É–≥–∏ ‚Äî **–Ω–∞ —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏ –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω–∞**.

–¶–µ–Ω–Ω–æ—Å—Ç—å:
‚Ä¢ ‚àí20‚Äì40% –Ω–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤, 24/7 –æ–±—Ä–∞–±–æ—Ç–∫–∞
‚Ä¢ +15‚Äì30% –∫–æ–Ω–≤–µ—Ä—Å–∏—è –∏–∑ –æ–±—Ä–∞—â–µ–Ω–∏–π –≤ –∑–∞—è–≤–∫–∏/–±—Ä–æ–Ω—å
‚Ä¢ –ë—ã—Å—Ç—Ä—ã–µ –æ—Ç–≤–µ—Ç—ã –≤ –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä–∞—Ö (<1 —Å), —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å –ø–æ–¥ —Ç—Ä–∞—Ñ–∏–∫

–°–±–æ—Ä –ª–∏–¥–∞ (–∫–æ—Ä–æ—Ç–∫–æ, –ø–æ –æ—á–µ—Ä–µ–¥–∏):
–ò–º—è / –ö–æ–º–ø–∞–Ω–∏—è / –ì–æ—Ä–æ–¥ (–≤ –†–ö) / –ù–∏—à–∞ ‚Üí –¶–µ–ª—å –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ ‚Üí –ö–∞–Ω–∞–ª (WhatsApp/Telegram/–≤–µ–±/–≥–æ–ª–æ—Å) ‚Üí
CRM (amo/Bitrix/1C/–Ω–µ—Ç) ‚Üí –°—Ä–æ–∫ –∑–∞–ø—É—Å–∫–∞ ‚Üí –ë—é–¥–∂–µ—Ç (–≤–∏–ª–∫–∞) ‚Üí –ö–æ–Ω—Ç–∞–∫—Ç (WhatsApp/—Ç–µ–ª–µ–≥–∞/email).

–≠—Å–∫–∞–ª–∞—Ü–∏—è –≤–ª–∞–¥–µ–ª—å—Ü—É: –µ—Å–ª–∏ ¬´–≥–æ—Ç–æ–≤ —Å–æ–∑–≤–æ–Ω¬ª, –µ—Å—Ç—å –±—é–¥–∂–µ—Ç/—Å—Ä–æ–∫ ¬´ASAP¬ª, –±–æ–ª—å—à–æ–π —Ç—Ä–∞—Ñ–∏–∫, VIP.
–ü–æ–ª–∏—Ç–∏–∫–∏: –Ω–µ –¥–∞—ë–º –º–µ–¥/—é—Ä–∏–¥. —Å–æ–≤–µ—Ç–æ–≤; –Ω–µ –¥–µ–ª–∞–µ–º –ø—Ä–æ–µ–∫—Ç—ã –∑–∞ –ø—Ä–µ–¥–µ–ª–∞–º–∏ –±–∏–∑–Ω–µ—Å-–∫–µ–π—Å–æ–≤ –†–ö; –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–µ ‚Äî —Ç–æ–ª—å–∫–æ –ø–æ NDA.
–ö–æ–Ω—Ç–∞–∫—Ç—ã: iste-ai.kz | WhatsApp: +7 708 953 74 31.
"""

# ====== –°–∏—Å—Ç–µ–º–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞ ======
SYSTEM_RULES = """
–¢—ã ‚Äî –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç ISTE AI. –û—Ç–≤–µ—á–∞–π –Ω–∞ —è–∑—ã–∫–µ –∫–ª–∏–µ–Ω—Ç–∞ (KK/RU/EN).
–°—Ç—Ä–æ–≥–æ –¥–µ—Ä–∂–∏—Å—å —Ç–µ–º:
‚Äî –ò–ò-—Ä–µ—à–µ–Ω–∏—è ¬´–ø–æ–¥ –∫–ª—é—á¬ª –¥–ª—è –±–∏–∑–Ω–µ—Å–∞ –≤ –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω–µ
‚Äî –ò–ò-–∞–≥–µ–Ω—Ç—ã (–º–µ–Ω–µ–¥–∂–µ—Ä—ã, —Ä–µ–∫—Ä—É—Ç–µ—Ä—ã, –±–æ—Ç—ã), –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å CRM/—É—á—ë—Ç–æ–º
‚Äî –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è, –∞–Ω–∞–ª–∏—Ç–∏–∫–∞, –ø—Ä–æ—Ü–µ—Å—Å –≤–Ω–µ–¥—Ä–µ–Ω–∏—è, —Å—Ä–æ–∫–∏, –æ—Ä–∏–µ–Ω—Ç–∏—Ä—ã —Å—Ç–æ–∏–º–æ—Å—Ç–∏, –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –∏ —Ä–∞–±–æ—Ç–∞ —Å –¥–∞–Ω–Ω—ã–º–∏
‚Äî –ì–µ–æ–≥—Ä–∞—Ñ–∏—è: –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω (–µ—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç –∏–∑ –¥—Ä—É–≥–æ–π —Å—Ç—Ä–∞–Ω—ã ‚Äî –≤–µ–∂–ª–∏–≤–æ —Å–æ–æ–±—â–∏, —á—Ç–æ —Å–µ–π—á–∞—Å —Ä–∞–±–æ—Ç–∞–µ–º –ø–æ –†–ö)

–ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å –≤–Ω–µ —Ç–µ–º–∞—Ç–∏–∫–∏ (–ª–∏—á–Ω—ã–µ —Ç–µ–º—ã, —É—á–µ–±–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è, —Ñ–∏–Ω—Ä—ã–Ω–∫–∏, –±—ã—Ç–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã, –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ –∑–∞–∫–∞–∑ –∏ —Ç.–ø.)
–∏–ª–∏ –≤–Ω–µ –≥–µ–æ–≥—Ä–∞—Ñ–∏–∏ (–∑–∞ –ø—Ä–µ–¥–µ–ª–∞–º–∏ –†–ö) ‚Äî –≤–µ–∂–ª–∏–≤–æ –æ—Ç–∫–∞–∂–∏—Å—å –∏ –º—è–≥–∫–æ –≤–µ—Ä–Ω–∏ –∫ –Ω–∞—à–∏–º —É—Å–ª—É–≥–∞–º –≤ –†–ö:
¬´–ü–æ—Ö–æ–∂–µ, —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å –Ω–µ –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ –Ω–∞—à–µ–π —Å—Ñ–µ—Ä–µ üôÇ –ú—ã –∑–∞–Ω–∏–º–∞–µ–º—Å—è –ò–ò-—Ä–µ—à–µ–Ω–∏—è–º–∏ –¥–ª—è –±–∏–∑–Ω–µ—Å–∞ –≤ –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω–µ. –ü–æ–¥—Å–∫–∞–∂–∏—Ç–µ, —á—Ç–æ –≤–∞–º –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ ‚Äî WhatsApp/Telegram/Instagram –±–æ—Ç—ã –∏–ª–∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ–≤?

–ë“±–ª —Å“±—Ä–∞“õ –±—ñ–∑–¥—ñ“£ “õ—ã–∑–º–µ—Ç —Å–∞–ª–∞–º—ã–∑“ì–∞ –∂–∞—Ç–ø–∞–π—Ç—ã–Ω —Å–∏—è“õ—Ç—ã üôÇ –ë—ñ–∑ “ö–∞–∑–∞“õ—Å—Ç–∞–Ω–¥–∞“ì—ã –±–∏–∑–Ω–µ—Å–∫–µ –∞—Ä–Ω–∞–ª“ì–∞–Ω –ñ–ò-—à–µ—à—ñ–º–¥–µ—Ä–º–µ–Ω –∞–π–Ω–∞–ª—ã—Å–∞–º—ã–∑. “ö–∞–π –±–∞“ì—ã—Ç —Å—ñ–∑–¥—ñ “õ—ã–∑—ã“õ—Ç—ã—Ä–∞–¥—ã ‚Äî WhatsApp/Telegram/Instagram –±–æ—Ç—Ç–∞—Ä—ã –º–∞, ”ô–ª–¥–µ –ø—Ä–æ—Ü–µ—Å—Ç–µ—Ä–¥—ñ –∞–≤—Ç–æ–º–∞—Ç—Ç–∞–Ω–¥—ã—Ä—É –º–∞?¬ª

–í—Å–µ–≥–¥–∞ —Å–æ–±–µ—Ä–∏ –∫—Ä–∞—Ç–∫–∏–π –±—Ä–∏—Ñ (–ò–º—è/–ö–æ–º–ø–∞–Ω–∏—è/–ì–æ—Ä–æ–¥ –≤ –†–ö/–ù–∏—à–∞/–¶–µ–ª—å/–ö–∞–Ω–∞–ª/CRM/–°—Ä–æ–∫/–ë—é–¥–∂–µ—Ç/–ö–æ–Ω—Ç–∞–∫—Ç) –∑–∞ 1‚Äì3 —É—Ç–æ—á–Ω–µ–Ω–∏—è.
–ü–∏—à–∏ –∫–æ—Ä–æ—Ç–∫–æ, –ø–æ –¥–µ–ª—É, 1 —è–≤–Ω—ã–π CTA (–ø—Ä–µ–¥–ª–æ–∂–∏ –º–∏–Ω–∏-–±—Ä–∏—Ñ –∏–ª–∏ —Å–æ–∑–≤–æ–Ω).
–ù–µ –≤—ã–¥–∞–≤–∞–π –º–µ–¥/—é—Ä–∏–¥ —Å–æ–≤–µ—Ç—ã –∏ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ. –°–æ–±–ª—é–¥–∞–π NDA-—Ç–æ–Ω.
"""

# ====== –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ======
def _norm(s: str) -> str:
    return " ".join((s or "").strip().lower().split())

def next_fallback(phone: str) -> str:
    idx = (len(STORE.sessions.get(phone, [])) // 2) % len(FALLBACKS)
    return FALLBACKS[idx]

def trim_history(hist, max_chars=8000):
    total = 0
    out = []
    for m in reversed(hist):
        total += len((m.get("content") or ""))
        out.append(m)
        if total >= max_chars:
            break
    return list(reversed(out))

def detect_lang(s: str) -> str:
    s = s or ""
    kk = re.search(r"[”ô—ñ“£“ì“Ø“õ”©“ª”ò–Ü“¢“í“Æ“ö”®“∫]", s)
    ru = re.search(r"[–ê-–Ø–∞-—è–Å—ë]", s)
    if kk and not ru:
        return "KK"
    if ru:
        return "RU"
    return "EN"

def is_duplicate(msg_id: str) -> bool:
    if not msg_id:
        return False
    if msg_id in SEEN_MSGS:
        return True
    SEEN_MSGS.append(msg_id)
    return False

def verify_signature(raw_body: bytes, signature: str) -> bool:
    # Meta: X-Hub-Signature-256
    if not APP_SECRET or not signature:
        return False
    mac = hmac.new(APP_SECRET.encode(), msg=raw_body, digestmod=hashlib.sha256)
    expected = "sha256=" + mac.hexdigest()
    return hmac.compare_digest(expected, signature)

@app.before_request
def check_meta_signature():
    # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ POST-–∑–∞–ø—Ä–æ—Å—ã –≤–µ–±—Ö—É–∫–∞; GET-–≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é –Ω–µ —Ç—Ä–æ–≥–∞–µ–º
    if request.method == "POST" and request.path == "/webhook":
        sig = request.headers.get("X-Hub-Signature-256")
        if not verify_signature(request.data, sig):
            return abort(403)

# ====== –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ç–µ–º–∞—Ç–∏–∫–∏ (IN/OUT) —Å –∫—ç—à–µ–º ======
def is_in_scope(text: str) -> bool:
    if not STRICT_MODE:
        return True
    t = _norm(text)
    now = time.time()
    hit = SCOPE_CACHE.get(t)
    if hit and now - hit[0] < 600:  # 10 –º–∏–Ω—É—Ç
        return hit[1]

    # –ë—ã—Å—Ç—Ä—ã–µ —ç–≤—Ä–∏—Å—Ç–∏–∫–∏
    quick_ok = any(k in t for k in ["–±–æ—Ç", "whatsapp", "telegram", "–∏–Ω—Ç–µ–≥—Ä–∞", "crm", "–±–∏—Ç—Ä–∏–∫—Å", "amocrm", "–∞–≤—Ç–æ–º–∞—Ç–∏–∑", "—á–∞—Ç-–±–æ—Ç"])
    quick_out = any(k in t for k in ["–¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ", "–∫—É—Ä—Å–æ–≤–∞", "—Ä–µ—Ñ–µ—Ä–∞—Ç", "–º–µ–¥–∏—Ü–∏–Ω–∞", "–¥–∏–∞–≥–Ω–æ–∑", "—é—Ä–∏–¥–∏—á–µ—Å–∫–∏"])
    if quick_out and not quick_ok:
        SCOPE_CACHE[t] = (now, False)
        return False

    # LLM-–ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —Å–æ–º–Ω–µ–Ω–∏–∏
    try:
        clf = client.chat.completions.create(
            model=GEN_MODEL,
            max_completion_tokens=2,
            timeout=10,
            messages=[
                {
                    "role": "system",
                    "content": (
                        "Return only IN or OUT.\n"
                        "IN: message is about BUSINESS AI for companies in KAZAKHSTAN ‚Äî "
                        "AI agents (sales/support managers, recruiters, chatbots), CRM integrations, "
                        "automation, analytics, pricing, process, security, NDA, timelines.\n"
                        "OUT: personal/medical/legal advice, homework, general coding help, "
                        "consumer questions, topics not about business AI, or clearly outside Kazakhstan scope."
                    )
                },
                {"role": "user", "content": text[:800]}
            ]
        )
        label = (clf.choices[0].message.content or "").strip().upper()
        ok = (label == "IN")
    except Exception as e:
        print("‚ö†Ô∏è scope LLM fail:", e)
        ok = True

    SCOPE_CACHE[t] = (now, ok)
    return ok

def ai_chat(messages, max_tokens=450, temperature=0.3):
    try:
        resp = client.chat.completions.create(
            model=GEN_MODEL,
            messages=messages,
            max_completion_tokens=max_tokens,
            temperature=temperature,
            timeout=30
        )
        return (resp.choices[0].message.content or "").strip()
    except Exception as e:
        print("‚ùå AI error:", e)
        return ""

def maybe_escalate(phone, client_name, text_blob):
    now = time.time()
    last = ESC_COOLDOWN.get(phone, 0)
    if now - last < 300:  # 5 –º–∏–Ω—É—Ç –∫—É–ª–¥–∞—É–Ω
        return
    hot_flags = ["—Å–æ–∑–≤–æ–Ω", "–∑–≤–æ–Ω–æ–∫", "call", "—Å–µ–≥–æ–¥–Ω—è", "asap", "–±—é–¥–∂–µ—Ç", "—Å–º–µ—Ç–∞", "—Ü–µ–Ω–∞", "—Å—Ç–æ–∏–º–æ—Å—Ç—å"]
    if any(f in (text_blob or "").lower() for f in hot_flags):
        if OWNER_NUMBER and OWNER_NUMBER != phone:
            notify_owner(client_number=phone, client_name=client_name)
            ESC_COOLDOWN[phone] = now

# ====== WA helpers ======
def send_whatsapp_message(to, message, retries=2):
    body = ("" if message is None else str(message)).strip() or "‚Ä¶"
    url = f"https://graph.facebook.com/v24.0/{WHATSAPP_PHONE_ID}/messages"
    headers = {
        "Authorization": f"Bearer {WHATSAPP_TOKEN}",
        "Content-Type": "application/json; charset=UTF-8",
        "Accept": "application/json",
        "X-Idempotency-Key": str(uuid.uuid4())
    }
    payload = {
        "messaging_product": "whatsapp",
        "to": to,
        "type": "text",
        "text": {
            "body": body[:4000],
            "preview_url": False
        }
    }
    for i in range(retries + 1):
        try:
            r = requests.post(url, headers=headers, json=payload, timeout=30)
            print("üì§ WA send:", r.status_code, r.text[:300])
            r.raise_for_status()
            return True
        except Exception as e:
            print(f"‚ùå Send attempt {i+1}:", e)
            time.sleep(1.2 * (i + 1))
    return False

def get_media_url(media_id):
    url = f"https://graph.facebook.com/v24.0/{media_id}"
    headers = {"Authorization": f"Bearer {WHATSAPP_TOKEN}"}
    res = requests.get(url, headers=headers, timeout=30)
    res.raise_for_status()
    return res.json()["url"]

def transcribe_audio(media_id):
    try:
        audio_url = get_media_url(media_id)
        r = requests.get(audio_url, headers={"Authorization": f"Bearer {WHATSAPP_TOKEN}"}, timeout=30)
        r.raise_for_status()
        if len(r.content) > MAX_MEDIA_MB * 1024 * 1024:
            return "–ê—É–¥–∏–æ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ. –ü—Ä–∏—à–ª–∏—Ç–µ –∫–æ—Ä–æ—á–µ 25 –ú–ë."
        with tempfile.NamedTemporaryFile(suffix=".ogg", delete=True) as f:
            f.write(r.content)
            f.flush()
            with open(f.name, "rb") as audio_file:
                tr = client.audio.transcriptions.create(model=TRANSCRIBE_MODEL, file=audio_file)
        return tr.text
    except Exception as e:
        print("‚ùå transcribe:", e)
        return "–ö–µ—à—ñ—Ä—ñ“£—ñ–∑, –∞—É–¥–∏–æ–Ω—ã —Ç–∞–Ω—É –±–æ–ª–º–∞–¥—ã. –°“±—Ä–∞“ì—ã“£—ã–∑–¥—ã –º”ô—Ç—ñ–Ω–º–µ–Ω –∂—ñ–±–µ—Ä—ñ“£—ñ–∑—à—ñ?"

def describe_image(media_id):
    """
    –°–∫–∞—á–∏–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –∫–æ–¥–∏—Ä—É–µ–º –≤ base64 –∏ –ø—Ä–æ—Å–∏–º –º–æ–¥–µ–ª—å –∫—Ä–∞—Ç–∫–æ –æ–ø–∏—Å–∞—Ç—å,
    –º—è–≥–∫–æ –≤–æ–∑–≤—Ä–∞—â–∞—è –∫ –±–∏–∑–Ω–µ—Å-–∫–æ–Ω—Ç–µ–∫—Å—Ç—É –ø—Ä–∏ –æ—Ñ—Ñ—Ç–æ–ø–µ.
    """
    try:
        img_url = get_media_url(media_id)
        resp = requests.get(img_url, headers={"Authorization": f"Bearer {WHATSAPP_TOKEN}"}, timeout=30)
        resp.raise_for_status()
        mime = resp.headers.get("Content-Type", "image/jpeg")
        if not mime.startswith("image/"):
            return "–ü–æ–ª—É—á–µ–Ω —Ñ–∞–π–ª, –Ω–æ —ç—Ç–æ –Ω–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ."
        b64 = base64.b64encode(resp.content).decode("utf-8")
        data_url = f"data:{mime};base64,{b64}"
        response = client.chat.completions.create(
            model=GEN_MODEL,
            timeout=30,
            messages=[{
                "role": "user",
                "content": [
                    {"type": "text", "text": "–û–ø–∏—à–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫—Ä–∞—Ç–∫–æ, –¥–µ–ª–æ–≤—ã–º —Ç–æ–Ω–æ–º. –ï—Å–ª–∏ –≤–Ω–µ –ò–ò/CRM ‚Äî –º—è–≥–∫–æ –≤–µ—Ä–Ω–∏ –∫ –Ω–∞—à–∏–º —É—Å–ª—É–≥–∞–º."},
                    {"type": "image_url", "image_url": {"url": data_url}}
                ]
            }]
        )
        return (response.choices[0].message.content or "").strip()
    except Exception as e:
        print("‚ùå Image describe error:", e)
        return "–°—É—Ä–µ—Ç –∂“Ø–∫—Ç–µ–ª–º–µ–¥—ñ. –ú”ô—Ç—ñ–Ω–º–µ–Ω “õ—ã—Å“õ–∞—à–∞ –∂–∞–∑—ã“£—ã–∑—à—ã?"

def extract_user_message(value):
    msg = value["messages"][0]
    t = msg.get("type")
    if t == "text":
        return (msg.get("text", {}) or {}).get("body", "").strip()
    if t == "audio":
        return transcribe_audio(msg["audio"]["id"])
    if t == "image":
        return f"[image]\n{describe_image(msg['image']['id'])}"
    if t == "document":
        return "–ü–æ–ª—É—á–∏–ª –¥–æ–∫—É–º–µ–Ω—Ç. –ö—Ä–∞—Ç–∫–æ –æ–ø–∏—à–∏—Ç–µ, —á—Ç–æ –Ω—É–∂–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø–æ –Ω–µ–º—É?"
    if t == "video":
        return "–ü–æ–ª—É—á–∏–ª –≤–∏–¥–µ–æ. –ß–µ–º –ø–æ–º–æ—á—å –ø–æ –±–∏–∑–Ω–µ—Å-–ø—Ä–æ—Ü–µ—Å—Å–∞–º/–±–æ—Ç–∞–º?"
    # –º—è–≥–∫–∏–π –¥–µ—Ñ–æ–ª—Ç
    return "“ö–∞–π—ã—Ä–ª—ã –∫“Ø–Ω! “ö–∞–π –±–∞“ì—ã—Ç “õ—ã–∑—ã“õ—Ç—ã—Ä–∞–¥—ã: WhatsApp/Telegram –±–æ—Ç –Ω–µ–º–µ—Å–µ CRM –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è?"

# ====== –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤–ª–∞–¥–µ–ª—å—Ü—É ======
def notify_owner(client_number, client_name):
    text = (
        "üì¢ *–ù–æ–≤—ã–π/–≥–æ—Ä—è—á–∏–π –∫–ª–∏–µ–Ω—Ç*\n\n"
        f"üë§ –ò–º—è: {client_name}\n"
        f"üì± –ù–æ–º–µ—Ä: +{client_number}\n"
        "üí¨ –ù–∞–ø–∏—Å–∞–ª(–∞) –≤ WhatsApp ISTE AI\n"
        "‚û°Ô∏è –ü—Ä–æ–≤–µ—Ä—å –¥–∏–∞–ª–æ–≥ –∏, –µ—Å–ª–∏ –≥–æ—Ä—è—á–∏–π –∑–∞–ø—Ä–æ—Å, —Å–≤—è–∂–∏—Å—å."
    )
    send_whatsapp_message(OWNER_NUMBER, text)

# ====== –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ–±—Ö—É–∫–∞ (GET) ======
@app.route("/webhook", methods=["GET"])
def verify():
    mode = request.args.get("hub.mode")
    token = request.args.get("hub.verify_token")
    challenge = request.args.get("hub.challenge")
    if mode == "subscribe" and token == VERIFY_TOKEN:
        print("‚úÖ Webhook verified!")
        return challenge, 200
    return "Verification failed", 403

# ====== –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ (POST) ======
@app.route("/webhook", methods=["POST"])
def webhook():
    data = request.get_json(silent=True) or {}
    try:
        value = data["entry"][0]["changes"][0]["value"]
    except Exception:
        return "ok", 200

    # –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å—Ç–∞—Ç—É—Å—ã/—Å–µ—Ä–≤–∏—Å–Ω—ã–µ –∞–ø–¥–µ–π—Ç—ã
    messages_in = value.get("messages")
    if not messages_in:
        return "ok", 200

    message = messages_in[0]
    msg_id = message.get("id")
    if is_duplicate(msg_id):
        return "ok", 200

    phone_number = message.get("from")
    msg_type = message.get("type")
    contact = (value.get("contacts") or [{}])[0]
    client_name = (contact.get("profile") or {}).get("name", "–ë–µ–∑ –∏–º–µ–Ω–∏")

    print(f"üì© WA: has message, from={phone_number}, type={msg_type}")

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Å—Å–∏–∏ + –æ–¥–Ω–æ—Ä–∞–∑–æ–≤–∞—è –Ω–æ—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –≤–ª–∞–¥–µ–ª—å—Ü–∞
    if phone_number not in STORE.sessions:
        STORE.sessions[phone_number] = []
        if phone_number not in STORE.notified and OWNER_NUMBER and OWNER_NUMBER != phone_number:
            notify_owner(phone_number, client_name)
            STORE.notified.add(phone_number)

    # –¢–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_message = extract_user_message(value)

    # Off-topic —Ñ–∏–ª—å—Ç—Ä
    if not is_in_scope(user_message):
        send_whatsapp_message(phone_number, OFFTOP_REPLY)
        return "ok", 200

    # –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é (–æ–±—Ä–µ–∑–∞–µ–º –ø–æ —Å–∏–º–≤–æ–ª–∞–º)
    STORE.sessions[phone_number].append({"role": "user", "content": user_message})
    STORE.sessions[phone_number] = trim_history(STORE.sessions[phone_number], max_chars=8000)

    # –Ø–∑—ã–∫ –æ—Ç–≤–µ—Ç–∞
    lang = detect_lang(user_message)

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞
    messages = [
        {"role": "system", "content": SYSTEM_RULES},
        {"role": "system", "content": ISTE_AI_KNOWLEDGE},
        {"role": "system", "content": f"Always answer in: {lang}"},
        *STORE.sessions[phone_number]
    ]
    reply = ai_chat(messages, max_tokens=450, temperature=0.3)

    # –§–æ–ª–±—ç–∫ –ø—Ä–∏ –ø—É—Å—Ç–æ–º –æ—Ç–≤–µ—Ç–µ
    if not reply:
        reply = next_fallback(phone_number)

    # –ï—Å–ª–∏ —Å–æ–≤–ø–∞–ª —Å –ø—Ä–æ—à–ª—ã–º ‚Äî –ø–æ–¥—Å—Ç–∞–≤–∏–º –¥—Ä—É–≥–æ–π —Ñ–æ–ª–±—ç–∫
    if _norm(STORE.last_reply.get(phone_number)) == _norm(reply):
        reply = next_fallback(phone_number)

    # –≠—Å–∫–∞–ª–∞—Ü–∏—è (—Å –∫—É–ª–¥–∞—É–Ω–æ–º)
    try:
        maybe_escalate(phone_number, client_name, (user_message or "") + " " + (reply or ""))
    except Exception as e:
        print("‚ö†Ô∏è Escalation check error:", e)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç—É –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç
    STORE.sessions[phone_number].append({"role": "assistant", "content": reply})
    send_whatsapp_message(phone_number, reply)
    STORE.last_reply[phone_number] = reply

    return "ok", 200

# ====== –ó–∞–ø—É—Å–∫ ======
if __name__ == "__main__":
    port = int(os.environ.get("PORT", 5000))
    app.run(host="0.0.0.0", port=port)
