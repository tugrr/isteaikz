from flask import Flask, request
import requests
import os
from dotenv import load_dotenv
from openai import OpenAI

load_dotenv()
app = Flask(__name__)

VERIFY_TOKEN = os.getenv("VERIFY_TOKEN")
WHATSAPP_TOKEN = os.getenv("WHATSAPP_TOKEN")
WHATSAPP_PHONE_ID = os.getenv("WHATSAPP_PHONE_ID")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")

client = OpenAI(api_key=OPENAI_API_KEY)

sessions = {}
notified_clients = set()

ISTE_AI_KNOWLEDGE = """
üß† *–ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π ISTE AI*

ISTE AI ‚Äî –∫–æ–º–ø–∞–Ω–∏—è –ø–æ –≤–Ω–µ–¥—Ä–µ–Ω–∏—é –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞ –¥–ª—è –±–∏–∑–Ω–µ—Å–∞.
–ú—ã —Å–æ–∑–¥–∞—ë–º —á–∞—Ç-–±–æ—Ç–æ–≤, –≥–æ–ª–æ—Å–æ–≤—ã—Ö –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–≤ –∏ —Å–∏—Å—Ç–µ–º—ã –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏.

üìç –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è:
‚Ä¢ ü§ñ –ò–ò-–∞–≥–µ–Ω—Ç—ã –∏ —á–∞—Ç-–±–æ—Ç—ã (WhatsApp, Telegram, —Å–∞–π—Ç)
‚Ä¢ ‚öôÔ∏è –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å CRM (amoCRM, Bitrix24)
‚Ä¢ üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è
‚Ä¢ üß† –û–±—É—á–µ–Ω–∏–µ –ò–ò –Ω–∞ –¥–∞–Ω–Ω—ã—Ö –∫–æ–º–ø–∞–Ω–∏–∏

üåç –°–∞–π—Ç: iste-ai.kz
üìû WhatsApp: +7 708 953 74 31
"""

# === –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ–±—Ö—É–∫–∞ ===
@app.route("/webhook", methods=["GET"])
def verify():
    mode = request.args.get("hub.mode")
    token = request.args.get("hub.verify_token")
    challenge = request.args.get("hub.challenge")

    if mode == "subscribe" and token == VERIFY_TOKEN:
        print("‚úÖ Webhook verified!")
        return challenge, 200
    return "Verification failed", 403


# === –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π ===
@app.route("/webhook", methods=["POST"])
def webhook():
    data = request.get_json()
    print("üì© –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ:", data)

    try:
        value = data["entry"][0]["changes"][0]["value"]
        message = value["messages"][0]
        phone_number = message["from"]
        msg_type = message.get("type")
        contact = value.get("contacts", [{}])[0]
        client_name = contact.get("profile", {}).get("name", "–ë–µ–∑ –∏–º–µ–Ω–∏")

        if phone_number not in sessions:
            sessions[phone_number] = []
            if phone_number not in notified_clients:
                notify_owner(phone_number, client_name)
                notified_clients.add(phone_number)

        # === –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –≤—Ö–æ–¥—è—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è ===
        user_message = ""
        if msg_type == "text":
            user_message = message["text"]["body"]

        elif msg_type == "audio":  # üé§ –ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            audio_id = message["audio"]["id"]
            user_message = transcribe_audio(audio_id)

        elif msg_type == "image":  # üñº –§–æ—Ç–æ
            image_id = message["image"]["id"]
            user_message = describe_image(image_id)

        else:
            user_message = "–ú–µ–Ω, ”ô–∑—ñ—Ä–≥–µ, –±“±–ª —Ñ–æ—Ä–º–∞—Ç—Ç–∞“ì—ã —Ö–∞–±–∞—Ä–ª–∞–º–∞–ª–∞—Ä–¥—ã “õ–∞–±—ã–ª–¥–∞–π –∞–ª–º–∞–π–º—ã–Ω üôÇ"

        sessions[phone_number].append({"role": "user", "content": user_message})

        # === –û—Ç–≤–µ—Ç –æ—Ç AI ===
        messages = [
            {"role": "system", "content": "–°–µ–Ω –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –∫–æ–º–ø–∞–Ω–∏–∏ ISTE AI. –ì–æ–≤–æ—Ä–∏ –ø–æ-–∫–∞–∑–∞—Ö—Å–∫–∏, –ø–æ-—Ä—É—Å—Å–∫–∏ –∏–ª–∏ –ø–æ-–∞–Ω–≥–ª–∏–π—Å–∫–∏, –∫–∞–∫ –∫–ª–∏–µ–Ω—Ç."},
            {"role": "system", "content": ISTE_AI_KNOWLEDGE}
        ] + sessions[phone_number]

        ai_response = client.chat.completions.create(
            model="gpt-4o-mini",
            messages=messages,
            temperature=0.7,
            max_tokens=400
        )

        reply = ai_response.choices[0].message.content.strip()
        sessions[phone_number].append({"role": "assistant", "content": reply})
        send_whatsapp_message(phone_number, reply)

    except Exception as e:
        print("‚ùå –û—à–∏–±–∫–∞:", e)

    return "ok", 200


# === –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–∞ –≤ WhatsApp ===
def send_whatsapp_message(to, message):
    url = f"https://graph.facebook.com/v21.0/{WHATSAPP_PHONE_ID}/messages"
    headers = {
        "Authorization": f"Bearer {WHATSAPP_TOKEN}",
        "Content-Type": "application/json"
    }
    payload = {
        "messaging_product": "whatsapp",
        "to": to,
        "type": "text",
        "text": {"body": message}
    }
    response = requests.post(url, headers=headers, json=payload)
    print("üì§ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω:", response.status_code, response.text)


# === –ì–æ–ª–æ—Å –≤ —Ç–µ–∫—Å—Ç (Whisper) ===
def transcribe_audio(media_id):
    audio_url = get_media_url(media_id)
    audio_data = requests.get(audio_url, headers={"Authorization": f"Bearer {WHATSAPP_TOKEN}"}).content
    with open("voice.ogg", "wb") as f:
        f.write(audio_data)
    audio_file = open("voice.ogg", "rb")
    transcript = client.audio.transcriptions.create(model="whisper-1", file=audio_file)
    return transcript.text


# === –û–ø–∏—Å–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è ===
def describe_image(media_id):
    img_url = get_media_url(media_id)
    response = client.chat.completions.create(
        model="gpt-4o-mini",
        messages=[{
            "role": "user",
            "content": [
                {"type": "text", "text": "–û–ø–∏—à–∏ —ç—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫—Ä–∞—Ç–∫–æ –∏ –¥—Ä—É–∂–µ–ª—é–±–Ω–æ."},
                {"type": "image_url", "image_url": {"url": img_url}}
            ]
        }]
    )
    return response.choices[0].message.content.strip()


# === –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –º–µ–¥–∏–∞ ===
def get_media_url(media_id):
    url = f"https://graph.facebook.com/v21.0/{media_id}"
    headers = {"Authorization": f"Bearer {WHATSAPP_TOKEN}"}
    res = requests.get(url, headers=headers)
    return res.json()["url"]


# === –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤–ª–∞–¥–µ–ª—å—Ü–∞ –æ –Ω–æ–≤–æ–º –∫–ª–∏–µ–Ω—Ç–µ ===
def notify_owner(client_number, client_name):
    owner_number = "77089537431"
    text = f"üì¢ *–ù–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç!* \n\nüë§ –ò–º—è: {client_name}\nüì± –ù–æ–º–µ—Ä: +{client_number}\nüí¨ –ù–∞–ø–∏—Å–∞–ª –≤–ø–µ—Ä–≤—ã–µ –≤ WhatsApp ISTE AI"
    send_whatsapp_message(owner_number, text)


if __name__ == "__main__":
    port = int(os.environ.get("PORT", 5000))
    app.run(host="0.0.0.0", port=port)
